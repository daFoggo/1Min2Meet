generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserType {
  GOOGLE_USER
  GUEST
}

enum ParticipantRole {
  OWNER
  PARTICIPANT
}

enum ResponseStatus {
  PENDING
  ACCEPTED
  DECLINED
  TENTATIVE
}

enum MeetingStatus {
  PUBLISHED
  SCHEDULED
  CANCELLED
  COMPLETED
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String
  image         String?
  emailVerified DateTime?
  timeZone      String?
  userType      UserType  @default(GUEST)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  // Relations (1:n)
  participations MeetingParticipant[]

  @@index([email])
}

model Meeting {
  id          String   @id @default(cuid())
  title       String
  description String?
  location    String?
  note        String?
  startTime   DateTime
  endTime     DateTime
  status      String   @default("PUBLISHED")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations (1:n)
  participants   MeetingParticipant[]
  dateSelections MeetingDateSelection[]
}

model MeetingParticipant {
  id             String   @id @default(cuid())
  role           String // owner/participant
  responseStatus String   @default("PENDING")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations (n:1)
  userId String
  user   User   @relation(fields: [userId], references: [id])

  meetingId String
  meeting   Meeting @relation(fields: [meetingId], references: [id])

  // Relations (1:n)
  availabilities AvailableFor[]

  @@unique([userId, meetingId])
  @@index([userId])
  @@index([meetingId])
}

model MeetingDate {
  id        String   @id @default(cuid())
  date      DateTime @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations (1:n)
  selections MeetingDateSelection[]
}

model MeetingDateSelection {
  id        String   @id @default(cuid())
  isFinal   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations (n:1)
  meetingId String
  meeting   Meeting @relation(fields: [meetingId], references: [id])

  dateId String
  date   MeetingDate @relation(fields: [dateId], references: [id])

  // Relations (1:n)
  availabilities AvailableFor[]

  @@unique([meetingId, dateId])
  @@index([meetingId])
  @@index([dateId])
}

model AvailableFor {
  id            String   @id @default(cuid())
  availableFrom DateTime
  availableTo   DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations (n:1)
  participantId String
  participant   MeetingParticipant @relation(fields: [participantId], references: [id])

  dateSelectionId String
  dateSelection   MeetingDateSelection @relation(fields: [dateSelectionId], references: [id])

  @@unique([participantId, dateSelectionId])
  @@index([participantId])
  @@index([dateSelectionId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
